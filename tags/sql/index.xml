<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sql on David Pilato</title><link>https://david.pilato.fr/tags/sql/</link><description>Recent content in sql on David Pilato</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022, David Pilato, France</copyright><lastBuildDate>Mon, 14 Sep 2015 11:05:00 +0200</lastBuildDate><atom:link href="https://david.pilato.fr/tags/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>Importing from a database without a database</title><link>https://david.pilato.fr/blog/2015-09-14-import-from-sql-without-database/</link><pubDate>Mon, 14 Sep 2015 11:05:00 +0200</pubDate><guid>https://david.pilato.fr/blog/2015-09-14-import-from-sql-without-database/</guid><description>Recently, I got a database MySQL dump and I was thinking of importing it into elasticsearch.
The first idea which pops up was:
install MySQL import the database read the database with Logstash and import into elasticsearch drop the database uninstall MySQL Well. I found that some of the steps are really not needed.
I can actually use ELK stack and create a simple recipe which can be used to import SQL dump scripts without needing to actually load the data to a database and then read it again from the database.</description></item><item><title>Advanced search for your Legacy application</title><link>https://david.pilato.fr/blog/2015-05-09-advanced-search-for-your-legacy-application/</link><pubDate>Sat, 09 May 2015 14:15:05 +0300</pubDate><guid>https://david.pilato.fr/blog/2015-05-09-advanced-search-for-your-legacy-application/</guid><description>I gave recently a talk at Voxxed Istanbul 2015 and I&amp;rsquo;d like to share here the story of this talk.
The talk was about adding a real search engine for your legacy application. Here &amp;ldquo;legacy&amp;rdquo; means an application which is still using SQL statements to execute search requests.
Our current CRM application can visualize our customers. Each person is represented as a Person bean and have some properties like name, dateOfBirth, children, country, city and some metrics related to the number of clicks each person did on the car or food buttons on our mobile application (center of interests that is).</description></item><item><title>Devoxx France 2015</title><link>https://david.pilato.fr/blog/2015-05-02-devoxx-france-2015/</link><pubDate>Sat, 02 May 2015 01:30:00 +0200</pubDate><guid>https://david.pilato.fr/blog/2015-05-02-devoxx-france-2015/</guid><description>I gave recently a talk at Devoxx France 2015 with Colin Surprenant and I&amp;rsquo;d like to share here some of the examples we used for the talk.
The talk was about &amp;ldquo;what my data look like?&amp;rdquo;.
We said that our manager was asking us to answer some questions:
who are our customers? how do they use our services? what do they think about us on Twitter? Our CRM database So we have a PostgreSQL database containing our data.</description></item></channel></rss>