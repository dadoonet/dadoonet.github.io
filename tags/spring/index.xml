<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on David Pilato</title><link>https://david.pilato.fr/tags/spring/</link><description>Recent content in spring on David Pilato</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022, David Pilato, France</copyright><lastBuildDate>Fri, 20 Jul 2012 23:38:00 +0200</lastBuildDate><atom:link href="https://david.pilato.fr/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>ScrutMyDocs : un moteur de recherche pour documents</title><link>https://david.pilato.fr/blog/2012-07-20-scrutmydocs-un-moteur-de-recherche-pour-documents/</link><pubDate>Fri, 20 Jul 2012 23:38:00 +0200</pubDate><guid>https://david.pilato.fr/blog/2012-07-20-scrutmydocs-un-moteur-de-recherche-pour-documents/</guid><description>Avec Malloum, nous venons de publier notre premier projet open-source commun: Scrut My Docs !
Technical overview
Nos objectifs Fournir une application web clé en main permettant d’indexer des documents de vos disques locaux. Fournir à la communauté Elasticsearch un modèle de base pour développer votre propre webapp pour une utilisation simple de recherche (« à la google »). Aider les débutants Elasticsearch Java avec des exemples concrets en Java Les technologies employées Elasticsearch !</description></item><item><title>La factory Spring pour Elasticsearch est sortie !</title><link>https://david.pilato.fr/blog/2012-05-25-la-factory-spring-pour-elasticsearch-est-sortie/</link><pubDate>Fri, 25 May 2012 16:45:36 +0000</pubDate><guid>https://david.pilato.fr/blog/2012-05-25-la-factory-spring-pour-elasticsearch-est-sortie/</guid><description>Et voilà, la première release de la factory spring vient d&amp;rsquo;être faite.
Vous pouvez donc maintenant l&amp;rsquo;utiliser dans vos projets Maven :
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;fr.pilato.spring&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-elasticsearch&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Le code source est disponible sur github.</description></item><item><title>Une factory Spring pour Elasticsearch</title><link>https://david.pilato.fr/blog/2012-04-02-une-factory-spring-pour-elasticsearch/</link><pubDate>Mon, 02 Apr 2012 20:02:09 +0000</pubDate><guid>https://david.pilato.fr/blog/2012-04-02-une-factory-spring-pour-elasticsearch/</guid><description>Le besoin Il existe dans Hibernate une fonctionnalité que j&amp;rsquo;aime beaucoup : la mise à jour automatique du schéma de la base en fonction des entités manipulées.
Mon besoin est de faire quasiment la même chose avec Elasticsearch. C&amp;rsquo;est à dire que je souhaite pouvoir appliquer un mapping pour un type donné à chaque fois que je démarre mon projet (en l’occurrence une webapp).
En me basant sur le projet développé par Erez Mazor, j&amp;rsquo;ai donc développé unefactory Spring visant à démarrer des clients (voire des noeuds) Elasticsearch.</description></item><item><title>Utilisation du mode Lazy d'Hibernate avec Struts et Spring</title><link>https://david.pilato.fr/blog/2010-02-24-utilisation-du-mode-lazy-dhibernate-avec-struts-et-spring/</link><pubDate>Wed, 24 Feb 2010 13:56:56 +0000</pubDate><guid>https://david.pilato.fr/blog/2010-02-24-utilisation-du-mode-lazy-dhibernate-avec-struts-et-spring/</guid><description>Lorsqu&amp;rsquo;on utilise Hibernate pour déléguer la gestion de la persistence, se pose alors le classique problème de l&amp;rsquo;exception LazyInitialisationException.
En effet, dans une modélisation assez classique, imaginons le cas suivant :
Couche Modèle (ou DAO) Classe POJO contenant un attribut x et une collection cols @Entity @Inheritance(strategy=InheritanceType.SINGLE_TABLE) public class Dossier { @Id @GeneratedValue private Long id; private String x; @OneToMany(cascade=CascadeType.ALL) private Collections cols; // Getter et setters } Classe DAO Voir le blog pour l&amp;rsquo;utilisation des generics de Java5 afin d&amp;rsquo;éviter d&amp;rsquo;avoir à coder toujours les mêmes méthodes CRUD.</description></item></channel></rss>