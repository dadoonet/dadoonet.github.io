<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on David Pilato</title><link>https://david.pilato.fr/tags/java/</link><description>Recent content in java on David Pilato</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022, David Pilato, France</copyright><lastBuildDate>Wed, 03 Aug 2016 18:24:37 +0200</lastBuildDate><atom:link href="https://david.pilato.fr/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Elasticsearch real integration tests with security enabled</title><link>https://david.pilato.fr/blog/2016-08-03-elasticsearch-real-integration-tests-with-security-enabled/</link><pubDate>Wed, 03 Aug 2016 18:24:37 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-08-03-elasticsearch-real-integration-tests-with-security-enabled/</guid><description>In a recent post we have seen how to create real integration tests. Those tests launch a real elasticsearch cluster, then run some tests you write with JUnit or your favorite test framework then stop the cluster.
But sometimes, you may want to add existing plugins in your integration test cluster.
For example, you might want to use X-Pack to bring fantastic features such as:
Security Alerting Monitoring Graph Reporting Let&amp;rsquo;s see how you can do that with Maven and Ant again&amp;hellip;</description></item><item><title>Creating Elasticsearch Transport Action</title><link>https://david.pilato.fr/blog/2016-08-01-creating-elasticsearch-transport-action/</link><pubDate>Mon, 01 Aug 2016 17:33:29 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-08-01-creating-elasticsearch-transport-action/</guid><description>This blog post is part of a series which will teach you:
How to write a plugin for elasticsearch 5.0 using Maven. How to add a new REST endpoint plugin to elasticsearch 5.0. How to use Transport Action classes (what you are reading now). How I wrote the ingest-bano plugin which will be hopefully released soonish. In this plugin, new REST endpoints have been added. In the previous article, we discovered how to add a REST plugin.</description></item><item><title>Adding a new REST endpoint to elasticsearch</title><link>https://david.pilato.fr/blog/2016-07-30-adding-a-new-rest-endpoint-to-elasticsearch/</link><pubDate>Sat, 30 Jul 2016 14:50:00 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-07-30-adding-a-new-rest-endpoint-to-elasticsearch/</guid><description>This blog post is part of a series which will teach you:
How to write a plugin for elasticsearch 5.0 using Maven. How to add a new REST endpoint plugin to elasticsearch 5.0 (what you are reading now). How I wrote the ingest-bano plugin which will be hopefully released soonish. In this plugin, new REST endpoints have been added. Imagine that you wish to add a new REST endpoint so you can send requests like:</description></item><item><title>Elasticsearch real integration tests</title><link>https://david.pilato.fr/blog/2016-07-29-elasticsearch-real-integration-tests/</link><pubDate>Fri, 29 Jul 2016 03:02:48 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-07-29-elasticsearch-real-integration-tests/</guid><description>Integration tests&amp;hellip; How do you run them?
Often, you are tempted to run services you want to test from JUnit for example. In elasticsearch, you can extend ESIntegTestCase class which will start a cluster of a given number of nodes.
public class BanoPluginIntegrationTest extends ESIntegTestCase { public void testPluginIsLoaded() throws Exception { // Your code here } } But to be honest, the test you are running does not guarantee that you will have the same result in production.</description></item><item><title>Creating an Ingest plugin for elasticsearch</title><link>https://david.pilato.fr/blog/2016-07-28-creating-an-ingest-plugin-for-elasticsearch/</link><pubDate>Thu, 28 Jul 2016 10:55:29 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-07-28-creating-an-ingest-plugin-for-elasticsearch/</guid><description>This blog post is part of a series which will teach you:
How to write a plugin for elasticsearch 5.0 using Maven. How to write an ingest plugin for elasticsearch 5.0 (what you are reading now). How I wrote the ingest-bano plugin which will be hopefully released soonish. Today, we will focus on writing an Ingest plugin for elasticsearch.
Hey! Wait! You wrote Ingest? What is that?
Ingest is a new feature coming in elasticsearch 5.</description></item><item><title>Creating a plugin for elasticsearch 5.0 using Maven</title><link>https://david.pilato.fr/blog/2016-07-27-creating-a-plugin-for-elasticsearch-5-dot-0-using-maven/</link><pubDate>Wed, 27 Jul 2016 16:00:27 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-07-27-creating-a-plugin-for-elasticsearch-5-dot-0-using-maven/</guid><description>Elasticsearch 5.0 switched to Gradle in October 2015.
You can obviously write a plugin using Gradle if you wish and you could benefit from all the goodies elasticsearch team wrote when it comes to integration tests and so on.
My colleague, Alexander Reelsen aka Spinscale on Twitter, wrote a super nice template if you wish to create an Ingest plugin for 5.0.
Hey! Wait! You wrote Ingest? What is that?
Ingest is a new feature coming in elasticsearch 5.</description></item><item><title>ScrutMyDocs : un moteur de recherche pour documents</title><link>https://david.pilato.fr/blog/2012-07-20-scrutmydocs-un-moteur-de-recherche-pour-documents/</link><pubDate>Fri, 20 Jul 2012 23:38:00 +0200</pubDate><guid>https://david.pilato.fr/blog/2012-07-20-scrutmydocs-un-moteur-de-recherche-pour-documents/</guid><description>Avec Malloum, nous venons de publier notre premier projet open-source commun: Scrut My Docs !
Technical overview
Nos objectifs Fournir une application web clé en main permettant d’indexer des documents de vos disques locaux. Fournir à la communauté Elasticsearch un modèle de base pour développer votre propre webapp pour une utilisation simple de recherche (« à la google »). Aider les débutants Elasticsearch Java avec des exemples concrets en Java Les technologies employées Elasticsearch ! et son écosystème (rivers, plugins) Spring JSF Primefaces Comment démarrer ?</description></item><item><title>La factory Spring pour Elasticsearch est sortie !</title><link>https://david.pilato.fr/blog/2012-05-25-la-factory-spring-pour-elasticsearch-est-sortie/</link><pubDate>Fri, 25 May 2012 16:45:36 +0000</pubDate><guid>https://david.pilato.fr/blog/2012-05-25-la-factory-spring-pour-elasticsearch-est-sortie/</guid><description>Et voilà, la première release de la factory spring vient d&amp;rsquo;être faite.
Vous pouvez donc maintenant l&amp;rsquo;utiliser dans vos projets Maven :
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;fr.pilato.spring&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-elasticsearch&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Le code source est disponible sur github.</description></item><item><title>Une factory Spring pour Elasticsearch</title><link>https://david.pilato.fr/blog/2012-04-02-une-factory-spring-pour-elasticsearch/</link><pubDate>Mon, 02 Apr 2012 20:02:09 +0000</pubDate><guid>https://david.pilato.fr/blog/2012-04-02-une-factory-spring-pour-elasticsearch/</guid><description>Le besoin Il existe dans Hibernate une fonctionnalité que j&amp;rsquo;aime beaucoup : la mise à jour automatique du schéma de la base en fonction des entités manipulées.
Mon besoin est de faire quasiment la même chose avec Elasticsearch. C&amp;rsquo;est à dire que je souhaite pouvoir appliquer un mapping pour un type donné à chaque fois que je démarre mon projet (en l’occurrence une webapp).
En me basant sur le projet développé par Erez Mazor, j&amp;rsquo;ai donc développé unefactory Spring visant à démarrer des clients (voire des noeuds) Elasticsearch.</description></item><item><title>Quel client Java pour elasticsearch ?</title><link>https://david.pilato.fr/blog/2012-02-13-quel-client-java-pour-elasticsearch/</link><pubDate>Mon, 13 Feb 2012 21:37:12 +0000</pubDate><guid>https://david.pilato.fr/blog/2012-02-13-quel-client-java-pour-elasticsearch/</guid><description>Il existe deux modes d&amp;rsquo;accès à elasticsearch en Java :
Inscrire un noeud client dans le cluster elasticsearch Utiliser un client &amp;ldquo;simple&amp;rdquo; Noeud client dans un cluster elasticsearch L&amp;rsquo;idée de cette méthode est de fabriquer un noeud elasticsearch (node) qui démarre avec les mêmes caractéristiques qu&amp;rsquo;un noeud d&amp;rsquo;indexation et de recherche sauf qu&amp;rsquo;on lui précise qu&amp;rsquo;il n&amp;rsquo;hébergera pas de données.
Pour cela, on utilise la propriété suivante :
node.data=false Elle indique que le noeud que nous démarrons n&amp;rsquo;hébergera pas de données.</description></item><item><title>Mon premier plugin elasticsearch : RSS River</title><link>https://david.pilato.fr/blog/2011-09-14-mon-premier-plugin-elasticsearch-rss-river/</link><pubDate>Wed, 14 Sep 2011 21:30:07 +0000</pubDate><guid>https://david.pilato.fr/blog/2011-09-14-mon-premier-plugin-elasticsearch-rss-river/</guid><description>Il existe dans elasticsearch la notion de river (rivière) qui comme son nom le laisse supposer permet de voir s&amp;rsquo;écouler des données depuis une source jusqu&amp;rsquo;à elasticsearch.
Au fur et à mesure que les données arrivent, la rivière les transporte et les envoie à l&amp;rsquo;indexation dans elasticsearch.
En standard, il existe 4 rivières :
CouchDB qui permet d&amp;rsquo;indexer toutes les nouveautés d&amp;rsquo;une base CouchDB. Voir aussi cet article à ce propos. RabbitMQ qui permet de récupérer des documents dans une queue de traitement asynchrone (genre JMS) Twitter qui permet d&amp;rsquo;indexer votre flux de messages twitter par exemple Wikipedia qui permet d&amp;rsquo;indexer toutes les nouveautés de l&amp;rsquo;encyclopédie au fur et à mesure de leurs publications Premiers pas J&amp;rsquo;ai commencé par bidouiller un peu la rivière CouchDB pour y apporter quelques fonctionnalités dont mes collègues avaient besoin :</description></item><item><title>Elasticsearch et les "facets"</title><link>https://david.pilato.fr/blog/2011-06-20-elasticsearch-et-les-facets/</link><pubDate>Mon, 20 Jun 2011 20:34:49 +0000</pubDate><guid>https://david.pilato.fr/blog/2011-06-20-elasticsearch-et-les-facets/</guid><description>Les aventures avec Elasticsearch se poursuivent.
Combien de fois ai-je dit récemment que ce projet est absolument génial et qu&amp;rsquo;il va constituer à mon sens un des projets majeurs des prochaines années&amp;hellip;
Qui n&amp;rsquo;a pas besoin de moteur de recherche ? Qui s&amp;rsquo;est déjà &amp;ldquo;emmerdé&amp;rdquo; à fabriquer ça lui-même ou à utiliser des briques pouvant aider au prix d&amp;rsquo;une complexité plus ou moins grande de mise en oeuvre ?
Je crois que nous sommes tous passés par là !</description></item><item><title>La recherche élastique...</title><link>https://david.pilato.fr/blog/2011-03-09-la-recherche-elastique/</link><pubDate>Wed, 09 Mar 2011 21:30:32 +0000</pubDate><guid>https://david.pilato.fr/blog/2011-03-09-la-recherche-elastique/</guid><description>Elasticsearch, un projet mature en quelques mois&amp;hellip; A suivre de très près !
En cherchant un bout de code pour rendre la couche Hibernate Search facilement distribuable sur un cluster de machines JBoss, je suis tombé sur le projet Elasticsearch.
Au début, un peu interloqué&amp;hellip; Puis, je me lance&amp;hellip;
Je télécharge le projet. Je dézippe.
Je lance&amp;hellip;
Miracle. En quelques secondes, je dispose d&amp;rsquo;un outil dans un Cloud, simple, me permettant d&amp;rsquo;indexer n&amp;rsquo;importe quel type de document, de le récupérer et de faire une recherche (au sens google du terme) sur n&amp;rsquo;importe quel champ&amp;hellip; Et cela, quelque soit la technologie employée (Java, C#, .</description></item><item><title>Utiliser Jetty 7 avec Maven</title><link>https://david.pilato.fr/blog/2010-02-25-utiliser-jetty-7-avec-maven/</link><pubDate>Thu, 25 Feb 2010 23:52:07 +0000</pubDate><guid>https://david.pilato.fr/blog/2010-02-25-utiliser-jetty-7-avec-maven/</guid><description>Jetty peut être très utile aux projets Maven, notamment dans la phase de tests d&amp;rsquo;intégration.
Il faut souvent déployer l&amp;rsquo;application sur un serveur type JBoss puis lancer les tests. Avec Jetty, on dispose alors d&amp;rsquo;un conteneur léger qui permet de disposer des fonctionnalités essentielles d&amp;rsquo;un conteneur (webapp, datasource, &amp;hellip;).
Problème : avec la version 7 de Jetty, il faut gérer l&amp;rsquo;authentification. Sinon, on obtient une erreur du type :
java.lang.IllegalStateException: No LoginService for org.eclipse.jetty.security.authentication.BasicAuthenticator@4095c5ec in ConstraintSecurityHandler@28f52a14@ J&amp;rsquo;ai trouvé la solution à ce problème sur le blog de Max Berger.</description></item><item><title>Problème Jetty / Maven sous Windows</title><link>https://david.pilato.fr/blog/2010-02-24-probleme-jetty-maven-sous-windows/</link><pubDate>Wed, 24 Feb 2010 20:14:51 +0000</pubDate><guid>https://david.pilato.fr/blog/2010-02-24-probleme-jetty-maven-sous-windows/</guid><description>Lorsqu&amp;rsquo;on souhaite lancer une WebApp avec le plugin Jetty sous Maven 2 depuis un PC sous windows on obtient une erreur référencée sous JIRA #JETTY-1063 :
java.net.URISyntaxException: Illegal character in path at index 18: file:/C:/Documents and Settings/USER/.m2/repository/org/mortbay/jetty/jetty-maven-plugin/7.0.0.1beta2/jetty-maven-plugin-7.0.0.1beta2.jar Ce problème n’est résolu que sous Maven 3.
Pour ceux qui souhaitent rester sous Maven 2 (Maven 3 est encore en version alpha), il faut modifier l&amp;rsquo;emplacement de la repository pour éviter le souci du caractère ESPACE présent dans le chemin C:\Documents and settings\USER\.</description></item><item><title>Utilisation du mode Lazy d'Hibernate avec Struts et Spring</title><link>https://david.pilato.fr/blog/2010-02-24-utilisation-du-mode-lazy-dhibernate-avec-struts-et-spring/</link><pubDate>Wed, 24 Feb 2010 13:56:56 +0000</pubDate><guid>https://david.pilato.fr/blog/2010-02-24-utilisation-du-mode-lazy-dhibernate-avec-struts-et-spring/</guid><description>Lorsqu&amp;rsquo;on utilise Hibernate pour déléguer la gestion de la persistence, se pose alors le classique problème de l&amp;rsquo;exception LazyInitialisationException.
En effet, dans une modélisation assez classique, imaginons le cas suivant :
Couche Modèle (ou DAO) Classe POJO contenant un attribut x et une collection cols @Entity @Inheritance(strategy=InheritanceType.SINGLE_TABLE) public class Dossier { @Id @GeneratedValue private Long id; private String x; @OneToMany(cascade=CascadeType.ALL) private Collections cols; // Getter et setters } Classe DAO Voir le blog pour l&amp;rsquo;utilisation des generics de Java5 afin d&amp;rsquo;éviter d&amp;rsquo;avoir à coder toujours les mêmes méthodes CRUD.</description></item><item><title>Découverte de Google App Engine pour Java</title><link>https://david.pilato.fr/blog/2010-01-23-decouverte-de-google-app-engine-pour-java/</link><pubDate>Sat, 23 Jan 2010 13:34:32 +0000</pubDate><guid>https://david.pilato.fr/blog/2010-01-23-decouverte-de-google-app-engine-pour-java/</guid><description>&lt;p>Je viens de découvrir Google App Engine pour Java. Je vais essayer de compléter cet article au fur et à mesure que je vais avancer dans son utilisation&amp;hellip;&lt;/p>
&lt;p>Stay tuned&amp;hellip;&lt;/p></description></item></channel></rss>