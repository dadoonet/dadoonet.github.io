<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maven on David Pilato</title><link>https://david.pilato.fr/tags/maven/</link><description>Recent content in maven on David Pilato</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022, David Pilato, France</copyright><lastBuildDate>Fri, 21 Oct 2016 18:24:37 +0200</lastBuildDate><atom:link href="https://david.pilato.fr/tags/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>Elasticsearch real integration tests with security enabled (Updated for GA)</title><link>https://david.pilato.fr/blog/2016-10-21-elasticsearch-real-integration-tests-with-security-enabled-updated-for-ga/</link><pubDate>Fri, 21 Oct 2016 18:24:37 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-10-21-elasticsearch-real-integration-tests-with-security-enabled-updated-for-ga/</guid><description>NOTE: This article is an updated version of Elasticsearch real integration tests with security enabled
In a recent post we have seen how to create real integration tests. Those tests launch a real elasticsearch cluster, then run some tests you write with JUnit or your favorite test framework then stop the cluster.
But sometimes, you may want to add existing plugins in your integration test cluster.
For example, you might want to use X-Pack to bring fantastic features such as:</description></item><item><title>Elasticsearch real integration tests (Updated for GA)</title><link>https://david.pilato.fr/blog/2016-10-18-elasticsearch-real-integration-tests-updated-for-ga/</link><pubDate>Tue, 18 Oct 2016 03:02:48 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-10-18-elasticsearch-real-integration-tests-updated-for-ga/</guid><description>NOTE: This article is an updated version of Elasticsearch real integration tests
Integration tests&amp;hellip; How do you run them?
Often, you are tempted to run services you want to test from JUnit for example. In elasticsearch, you can extend ESIntegTestCase class which will start a cluster of a given number of nodes.
public class BanoPluginIntegrationTest extends ESIntegTestCase { public void testPluginIsLoaded() throws Exception { // Your code here } } But to be honest, the test you are running does not guarantee that you will have the same result in production.</description></item><item><title>Creating a plugin for elasticsearch 5.0 using Maven (Updated for GA)</title><link>https://david.pilato.fr/blog/2016-10-16-creating-a-plugin-for-elasticsearch-5-dot-0-using-maven-updated-for-ga/</link><pubDate>Sun, 16 Oct 2016 04:00:00 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-10-16-creating-a-plugin-for-elasticsearch-5-dot-0-using-maven-updated-for-ga/</guid><description>NOTE: This article is an updated version of Creating a plugin for elasticsearch 5.0 using Maven
Elasticsearch 5.0 switched to Gradle in October 2015.
You can obviously write a plugin using Gradle if you wish and you could benefit from all the goodies elasticsearch team wrote when it comes to integration tests and so on.
My colleague, Alexander Reelsen aka Spinscale on Twitter, wrote a super nice template if you wish to create an Ingest plugin for 5.</description></item><item><title>Elasticsearch real integration tests with security enabled</title><link>https://david.pilato.fr/blog/2016-08-03-elasticsearch-real-integration-tests-with-security-enabled/</link><pubDate>Wed, 03 Aug 2016 18:24:37 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-08-03-elasticsearch-real-integration-tests-with-security-enabled/</guid><description>NOTE: This article is now outdated. Please read Elasticsearch real integration tests with security enabled (Updated for GA) instead!
In a recent post we have seen how to create real integration tests. Those tests launch a real elasticsearch cluster, then run some tests you write with JUnit or your favorite test framework then stop the cluster.
But sometimes, you may want to add existing plugins in your integration test cluster.
For example, you might want to use X-Pack to bring fantastic features such as:</description></item><item><title>Elasticsearch real integration tests</title><link>https://david.pilato.fr/blog/2016-07-29-elasticsearch-real-integration-tests/</link><pubDate>Fri, 29 Jul 2016 03:02:48 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-07-29-elasticsearch-real-integration-tests/</guid><description>NOTE: This article is now outdated. Please read Elasticsearch real integration tests (Updated for GA) instead!
Integration tests&amp;hellip; How do you run them?
Often, you are tempted to run services you want to test from JUnit for example. In elasticsearch, you can extend ESIntegTestCase class which will start a cluster of a given number of nodes.
public class BanoPluginIntegrationTest extends ESIntegTestCase { public void testPluginIsLoaded() throws Exception { // Your code here } } But to be honest, the test you are running does not guarantee that you will have the same result in production.</description></item><item><title>Creating a plugin for elasticsearch 5.0 using Maven</title><link>https://david.pilato.fr/blog/2016-07-27-creating-a-plugin-for-elasticsearch-5-dot-0-using-maven/</link><pubDate>Wed, 27 Jul 2016 16:00:27 +0200</pubDate><guid>https://david.pilato.fr/blog/2016-07-27-creating-a-plugin-for-elasticsearch-5-dot-0-using-maven/</guid><description>NOTE: This article is now outdated. Please read Creating a plugin for elasticsearch 5.0 using Maven (Updated for GA) instead!
Elasticsearch 5.0 switched to Gradle in October 2015.
You can obviously write a plugin using Gradle if you wish and you could benefit from all the goodies elasticsearch team wrote when it comes to integration tests and so on.
My colleague, Alexander Reelsen aka Spinscale on Twitter, wrote a super nice template if you wish to create an Ingest plugin for 5.</description></item><item><title>Using Log4J2 with Hibernate 4</title><link>https://david.pilato.fr/blog/2015-03-05-using-log4j2-with-hibernate-4/</link><pubDate>Thu, 05 Mar 2015 22:00:00 +0200</pubDate><guid>https://david.pilato.fr/blog/2015-03-05-using-log4j2-with-hibernate-4/</guid><description>I was trying to use Hibernate 4.3.8.Final with Log4J2 and I spent some hours to find why Hibernate was not using Log4J2 though it was declared in my pom.xml file.
Actually, I hit issue JBLOGGING-107.
The workaround is simply to add a more recent jboss-logging dependency than the one shipped by default with Hibernate 4.3.8.Final.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.logging&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jboss-logging&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.1.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;</description></item><item><title>La factory Spring pour Elasticsearch est sortie !</title><link>https://david.pilato.fr/blog/2012-05-25-la-factory-spring-pour-elasticsearch-est-sortie/</link><pubDate>Fri, 25 May 2012 16:45:36 +0000</pubDate><guid>https://david.pilato.fr/blog/2012-05-25-la-factory-spring-pour-elasticsearch-est-sortie/</guid><description>Et voilà, la première release de la factory spring vient d&amp;rsquo;être faite.
Vous pouvez donc maintenant l&amp;rsquo;utiliser dans vos projets Maven :
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;fr.pilato.spring&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-elasticsearch&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Le code source est disponible sur github.</description></item><item><title>Une factory Spring pour Elasticsearch</title><link>https://david.pilato.fr/blog/2012-04-02-une-factory-spring-pour-elasticsearch/</link><pubDate>Mon, 02 Apr 2012 20:02:09 +0000</pubDate><guid>https://david.pilato.fr/blog/2012-04-02-une-factory-spring-pour-elasticsearch/</guid><description>Le besoin Il existe dans Hibernate une fonctionnalité que j&amp;rsquo;aime beaucoup : la mise à jour automatique du schéma de la base en fonction des entités manipulées.
Mon besoin est de faire quasiment la même chose avec Elasticsearch. C&amp;rsquo;est à dire que je souhaite pouvoir appliquer un mapping pour un type donné à chaque fois que je démarre mon projet (en l’occurrence une webapp).
En me basant sur le projet développé par Erez Mazor, j&amp;rsquo;ai donc développé unefactory Spring visant à démarrer des clients (voire des noeuds) Elasticsearch.</description></item><item><title>Quel client Java pour elasticsearch ?</title><link>https://david.pilato.fr/blog/2012-02-13-quel-client-java-pour-elasticsearch/</link><pubDate>Mon, 13 Feb 2012 21:37:12 +0000</pubDate><guid>https://david.pilato.fr/blog/2012-02-13-quel-client-java-pour-elasticsearch/</guid><description>Il existe deux modes d&amp;rsquo;accès à elasticsearch en Java :
Inscrire un noeud client dans le cluster elasticsearch Utiliser un client &amp;ldquo;simple&amp;rdquo; Noeud client dans un cluster elasticsearch L&amp;rsquo;idée de cette méthode est de fabriquer un noeud elasticsearch (node) qui démarre avec les mêmes caractéristiques qu&amp;rsquo;un noeud d&amp;rsquo;indexation et de recherche sauf qu&amp;rsquo;on lui précise qu&amp;rsquo;il n&amp;rsquo;hébergera pas de données.
Pour cela, on utilise la propriété suivante :
node.data=false Elle indique que le noeud que nous démarrons n&amp;rsquo;hébergera pas de données.</description></item><item><title>Mon premier plugin elasticsearch : RSS River</title><link>https://david.pilato.fr/blog/2011-09-14-mon-premier-plugin-elasticsearch-rss-river/</link><pubDate>Wed, 14 Sep 2011 21:30:07 +0000</pubDate><guid>https://david.pilato.fr/blog/2011-09-14-mon-premier-plugin-elasticsearch-rss-river/</guid><description>Il existe dans elasticsearch la notion de river (rivière) qui comme son nom le laisse supposer permet de voir s&amp;rsquo;écouler des données depuis une source jusqu&amp;rsquo;à elasticsearch.
Au fur et à mesure que les données arrivent, la rivière les transporte et les envoie à l&amp;rsquo;indexation dans elasticsearch.
En standard, il existe 4 rivières :
CouchDB qui permet d&amp;rsquo;indexer toutes les nouveautés d&amp;rsquo;une base CouchDB. Voir aussi cet article à ce propos. RabbitMQ qui permet de récupérer des documents dans une queue de traitement asynchrone (genre JMS) Twitter qui permet d&amp;rsquo;indexer votre flux de messages twitter par exemple Wikipedia qui permet d&amp;rsquo;indexer toutes les nouveautés de l&amp;rsquo;encyclopédie au fur et à mesure de leurs publications Premiers pas J&amp;rsquo;ai commencé par bidouiller un peu la rivière CouchDB pour y apporter quelques fonctionnalités dont mes collègues avaient besoin :</description></item><item><title>Utiliser Jetty 7 avec Maven</title><link>https://david.pilato.fr/blog/2010-02-25-utiliser-jetty-7-avec-maven/</link><pubDate>Thu, 25 Feb 2010 23:52:07 +0000</pubDate><guid>https://david.pilato.fr/blog/2010-02-25-utiliser-jetty-7-avec-maven/</guid><description>Jetty peut être très utile aux projets Maven, notamment dans la phase de tests d&amp;rsquo;intégration.
Il faut souvent déployer l&amp;rsquo;application sur un serveur type JBoss puis lancer les tests. Avec Jetty, on dispose alors d&amp;rsquo;un conteneur léger qui permet de disposer des fonctionnalités essentielles d&amp;rsquo;un conteneur (webapp, datasource, &amp;hellip;).
Problème : avec la version 7 de Jetty, il faut gérer l&amp;rsquo;authentification. Sinon, on obtient une erreur du type :
java.lang.IllegalStateException: No LoginService for org.eclipse.jetty.security.authentication.BasicAuthenticator@4095c5ec in ConstraintSecurityHandler@28f52a14@ J&amp;rsquo;ai trouvé la solution à ce problème sur le blog de Max Berger.</description></item><item><title>Problème Jetty / Maven sous Windows</title><link>https://david.pilato.fr/blog/2010-02-24-probleme-jetty-maven-sous-windows/</link><pubDate>Wed, 24 Feb 2010 20:14:51 +0000</pubDate><guid>https://david.pilato.fr/blog/2010-02-24-probleme-jetty-maven-sous-windows/</guid><description>Lorsqu&amp;rsquo;on souhaite lancer une WebApp avec le plugin Jetty sous Maven 2 depuis un PC sous windows on obtient une erreur référencée sous JIRA #JETTY-1063 :
java.net.URISyntaxException: Illegal character in path at index 18: file:/C:/Documents and Settings/USER/.m2/repository/org/mortbay/jetty/jetty-maven-plugin/7.0.0.1beta2/jetty-maven-plugin-7.0.0.1beta2.jar Ce problème n’est résolu que sous Maven 3.
Pour ceux qui souhaitent rester sous Maven 2 (Maven 3 est encore en version alpha), il faut modifier l&amp;rsquo;emplacement de la repository pour éviter le souci du caractère ESPACE présent dans le chemin C:\Documents and settings\USER\.</description></item><item><title>Publication de documentation fonctionnelle avec Maven</title><link>https://david.pilato.fr/blog/2010-02-23-publication-de-documentation-fonctionnelle-avec-maven/</link><pubDate>Tue, 23 Feb 2010 12:40:26 +0000</pubDate><guid>https://david.pilato.fr/blog/2010-02-23-publication-de-documentation-fonctionnelle-avec-maven/</guid><description>&lt;p>Voici une astuce permettant de laisser les analystes ou concepteurs utiliser leurs logiciels habituels de documentation (oOo ou Word), tout en permettant de publier automatiquement avec la génération du site un document PDF lisible par tous.&lt;/p></description></item></channel></rss>